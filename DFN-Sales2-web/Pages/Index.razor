@page "/"
@inject IJSRuntime JS

<PageTitle>Index</PageTitle>

<h1>DFN Sales 2 Team Sales Data Input Solution</h1>
<br>
<br>
<table class="table">
    <thead class="thead-dark">
    <tr>
        <th scope="col">#</th>
        <th scope="col">Parameter Name</th>
        <th scope="col">DFN Parameter</th>
        <th scope="col">Value</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <th scope="row">1</th>
        <td>담당자</td>
        <td>product_id</td>
        <td>
            <select @bind="@AccountMangerName">
                @foreach (var items in AccountManagerSelecter())
                {
                    <option value=@items>@items</option>
                }
            </select>
        </td>
    </tr>
    <tr>
        <th scope="row">2</th>
        <td>광고주 앱명</td>
        <td>product_name</td>

        <td>
            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="AppName">
        </td>
    </tr>
    <tr>
        <th scope="row">3</th>
        <td>결제사</td>
        <td>product_name</td>

        <td>
            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="BuyerName">
        </td>
    </tr>
    <tr>
        <th scope="row">4</th>
        <td>고객 구분</td>
        <td>customer_type</td>

        <td>
            <select @bind="@CustomerType">
                @foreach (var items in CustomerTypeSelecter())
                {
                    <option value=@items>@items</option>
                }
            </select>
        </td>
    </tr>
    <tr>
        <th scope="row">5</th>
        <td>매출 발생 월</td>
        <td>order_id</td>

        <td>
            <select @bind="@OrderId">
                @foreach (var items in OrderIdSelecter())
                {
                    <option value=@items>@items</option>
                }
            </select>
        </td>
    </tr>
    <tr>
        <th scope="row">6</th>
        <td>발생 매출</td>
        <td>price</td>

        <td>
            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="Price">
        </td>
    </tr>
    <tr>
        <td colspan="4" class="text-center">
            <h4>매출 추가 정보</h4>
        </td>
    </tr>
    <tr>
        <th scope="row">1</th>
        <td>Web Analytics</td>
        <td>web_analytics</td>

        <td>
            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="WebAnalyticsPrice">
        </td>
    </tr>
    <tr>
        <th scope="row">2</th>
        <td>Growth Action</td>
        <td>growth_action</td>

        <td>
            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="GrowthActionPrice">
        </td>
    </tr>
    <tr>
        <th scope="row">3</th>
        <td>Fraud Kill-Chain</td>
        <td>fraud_kill_chain</td>


        <td>
            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default"@bind="FraudKillChainPrice">
        </td>
    </tr>
    <tr>
        <th scope="row">4</th>
        <td>Advanced Analytics</td>
        <td>advanced_analytics</td>

        <td>
            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind=AAPrice>
        </td>
    </tr>
    <tr>
        <th scope="row">5</th>
        <td>nCPI Package</td>
        <td>ncpi_package</td>

        <td>
            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="nCPIPrice">
        </td>
    </tr>
    <tr>
        <th scope="row">6</th>
        <td>Data House</td>
        <td>data_house</td>

        <td>
            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="DataHousePrice">
        </td>
    </tr>
    </tbody>
</table>
<br>
<div class="container-fluid">
    <div class="row justify-content-center">
        <button class="btn btn-primary btn-lg btn-block" @onclick="SubmitButton">제출</button>
    </div>
</div>


@code
{
    private String AccountMangerName { get; set; }
    private String AppName { get; set; }
    private String BuyerName { get; set; }
    private String CustomerType { get; set; }
    private String OrderId { get; set; }
    private Double Price { get; set; }
    private Double WebAnalyticsPrice { get; set; }
    private Double GrowthActionPrice { get; set; }
    private Double nCPIPrice { get; set; }
    private Double FraudKillChainPrice { get; set; }
    private Double AAPrice { get; set; }
    private Double DataHousePrice { get; set; }
    private Double orderSale;


    protected override void OnInitialized()
    {
    }

    private async void SubmitButton()
    {
        List<object> productList = new List<object>();

        await JS.InvokeVoidAsync("alert", "담당자 명 : " + AccountMangerName + "\n" +
                                          "프로젝트 명 : " + BuyerName + "(" + AppName + ")\n" +
                                          "Order Id : " + OrderId + "\n" +
                                          "Price : " + Price + "\n" +
                                          "Customer Type : " + CustomerType + "\n" +
                                          "Web Analytics : " + WebAnalyticsPrice + "\n" +
                                          "Growth Action : " + GrowthActionPrice + "\n" +
                                          "Fraud Kill-Chain : " + FraudKillChainPrice + "\n" +
                                          "Advanced Analytics : " + AAPrice + "\n" +
                                          "nCPI Package : " + nCPIPrice + "\n" +
                                          "Data House : " + DataHousePrice);
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "제출하시겠습니까?");

        if (confirmed)
        {
            orderSale = Price + AAPrice + DataHousePrice + GrowthActionPrice + WebAnalyticsPrice + FraudKillChainPrice + nCPIPrice;

            Dictionary<string, object> myDic = new Dictionary<string, object>();
            myDic.Add("customer_type", CustomerType);
            myDic.Add("web_analytics", WebAnalyticsPrice);
            myDic.Add("growth_action", GrowthActionPrice);
            myDic.Add("fraud_kill_chain", FraudKillChainPrice);
            myDic.Add("advanced_analytics", AAPrice);
            myDic.Add("ncpi_package", nCPIPrice);
            myDic.Add("data_house", DataHousePrice);
            var productSet = await JS.InvokeAsync<object>("adbrix.commerceAttr.product", AccountMangerName, BuyerName + "(" + AppName + ")", Price, 1, 0, "KRW", null, myDic);

            productList.Add(productSet);

            await JS.InvokeVoidAsync("adbrix.common.purchase", OrderId, productList, orderSale, 0, 0, "CreditCard");

            await JS.InvokeVoidAsync("alert", "디파이너리로 매출 데이터 전송이 완료되었습니다.");
            
            cleanUp();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "디파이너리로 매출 데이터 전송이 취소되었습니다.");
        }
    }

    private List<String> AccountManagerSelecter()
    {
        List<String> accountManager = new List<string>();
        accountManager.Add("담당자를 선택하세요");
        accountManager.Add("andy");
        accountManager.Add("dante");

        return accountManager;
    }

    private List<String> CustomerTypeSelecter()
    {
        List<String> customType = new List<string>();
        customType.Add("고객 타입을 선택하세요.");
        customType.Add("advertiser");
        customType.Add("agency");

        return customType;
    }

    private List<String> OrderIdSelecter()
    {
        List<String> orderIDValue = new List<string>();
        orderIDValue.Add("정산 연월을 선택하세요.");
        orderIDValue.Add("2022-01");
        orderIDValue.Add("2022-02");
        orderIDValue.Add("2022-03");
        orderIDValue.Add("2022-04");
        orderIDValue.Add("2022-05");
        orderIDValue.Add("2022-06");
        orderIDValue.Add("2022-07");
        orderIDValue.Add("2022-08");
        orderIDValue.Add("2022-09");
        orderIDValue.Add("2022-10");
        orderIDValue.Add("2022-11");
        orderIDValue.Add("2022-12");

        return orderIDValue;
    }

    private void cleanUp()
    {

        BuyerName = "";
        AppName = "";
        Price = 0.0;
        WebAnalyticsPrice = 0.0;
        GrowthActionPrice = 0.0;
        FraudKillChainPrice = 0.0;
        AAPrice = 0.0;
        nCPIPrice = 0.0;
        DataHousePrice = 0.0;



    }
}